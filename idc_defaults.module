<?php

/**
 * @file
 * Defines hooks used for JHU's iDC integration.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Session\UserSession;
use Drupal\user\Entity\User;
use Drupal\Core\Logger\LoggerChannelFactoryInterface;
use Drush\Commands\DrushCommands;
use Drush\Drush;

/**
 * Implements hook_cron().
 */
function idc_defaults_cron(){
  define('DRUPAL_ROOT', getcwd());
  // Limit frequency of this cron job to once per day.
  $cron_config = \Drupal::configFactory()->getEditable('idc_defaults.settings');
  $interval = $cron_config->get('interval');
  $interval = !empty($interval) ? $interval : 3;
  $next_execution = \Drupal::state()->get('idc_defaults.next_execution');
  $next_execution = !empty($next_execution) ? $next_execution : 0;
  if (REQUEST_TIME >= $next_execution) {
    if (\Drupal::state()->get('idc_defaults_show_status_message')) {
      \Drupal::messenger()->addMessage(t('idc_defaults executed at %time', ['%time' => date_iso8601(REQUEST_TIME)]));
      \Drupal::state()->set('idc_defaults_show_status_message', FALSE);

    }
    \Drupal::state()->set('idc_defaults.next_execution', REQUEST_TIME + $interval);
  }
  try {
    // Run php file as admin user.
    $user = User::load(1);
    $accountSwitcher = \Drupal::service('account_switcher');
    $userSession = new UserSession([
      'uid'   => $user->id(),
      'name'  => $user->getDisplayName(),
      'roles' => $user->getRoles(),
    ]);
    $accountSwitcher->switchTo($userSession);
    include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'idc_defaults') . '/src/generate-image-derivatives.php';
    \Drupal::logger('idc_defaults')->info($user->getDisplayName() . ' executed idc_defaults at ' . $user->id());
    $accountSwitcher->switchBack();
  } catch (Exception $th) {
    \Drupal::logger('idc_defaults')->error($th);
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function idc_defaults_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if (isset($fields['field_member_of'])) {
    $fields['field_member_of']->addConstraint('WorkbenchAccess');
  }
  if (isset($fields['field_access_terms'])) {
    $fields['field_access_terms']->addConstraint('WorkbenchSections');
  }
}

/**
 * Implements hook_field_widget_info_alter().
 */
function idc_defaults_field_widget_info_alter(array &$info) {
  // Allow the idc_unique field to use the normal string_textfield widget as
  // opposed to defining its own empty extension of it.
  $info['string_textfield']['field_types'][] = 'idc_unique';
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function idc_defaults_field_formatter_info_alter(array &$info) {
  $info['string']['field_types'][] = 'idc_unique';
}

/**
 * Implements hook_plugin_filter_condition plugin
 *
 * Filters conditions out of the google tag manager form. The google
 * tag manager from does not need these and they will cause problems if
 * they do exist there.
 *
 * This was borrowed from https://github.com/Islandora/documentation/issues/1887,
 * though I added in a couple (one that was specific to our setup).
 */
function idc_defaults_plugin_filter_condition__google_tag_alter(&$definitions, array $extra) {
  unset($definitions['content_entity_type']);
  unset($definitions['file_uses_filesystem']);
  unset($definitions['media_has_mimetype']);
  unset($definitions['media_source_mimetype']);
  unset($definitions['media_has_term']);
  unset($definitions['media_is_islandora_media']);
  unset($definitions['media_uses_filesystem']);
  unset($definitions['node_had_namespace']);
  unset($definitions['node_has_parent']);
  unset($definitions['node_has_term']);
  unset($definitions['node_is_islandora_object']);
  unset($definitions['node_referenced_by_node']);
  unset($definitions['parent_node_has_term']);
  unset($definitions['media_mediatype']);
  unset($definitions['islandora_entity_bundle']);
}
